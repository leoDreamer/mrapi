import { dirname, join } from 'path'
import { writeFileSync, mkdirSync, existsSync } from 'fs'
import { format, Options as PrettierOptions } from 'prettier'
import { modelTmpFn, modelsTmpFn, getCrud } from './templates'

// Reference URL: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#dataTypeFormat
function getFieldType(type: string) {
  const lowercaseType = type.toLowerCase()
  switch (lowercaseType) {
    case 'int':
      return 'integer'
    case 'string':
      return 'string'
    case 'boolean':
      return 'boolean'
    case 'datetime':
      return 'string'
    case 'float':
      return 'number'
    case 'null':
      return 'string'
    case 'json':
      return 'string'
  }
  throw new Error('Unknown field type. type: ' + type)
}

function disableQueries(options: any, model: string) {
  return (
    !options.disableQueries &&
    !options.excludeModels.find(
      (item: any) => item.name === model && item.queries,
    )
  )
}

function excludedOperations(options: any, model: string) {
  return options.excludeQueriesAndMutations.concat(
    options.excludeQueriesAndMutationsByModel[model] ?? [],
  )
}

function disableMutations(options: any, model: string) {
  return (
    !options.disableMutations &&
    !options.excludeModels.find(
      (item: any) => item.name === model && item.mutations,
    )
  )
}

function smallModel(name: string) {
  return name.charAt(0).toLowerCase() + name.slice(1)
}

export function outputFile(content: string, outputPath: string) {
  const dir = dirname(outputPath)
  !existsSync(dir) && mkdirSync(dir, { recursive: true })
  writeFileSync(outputPath, formation(content))
}

function formation(
  text: string,
  parser: PrettierOptions['parser'] = 'babel-ts', //'babel',
  prefixStr: string = `/**
 * This file was generated by mrapi
 * Do not make changes to this file directly
 */`,
) {
  return format(`${prefixStr}\n${text}`, {
    singleQuote: true,
    semi: false,
    trailingComma: 'all',
    tabWidth: 2,
    parser,
  })
}

export function genPaths(
  options: any,
  model: any,
  mapping: any,
  modelObj: any,
) {
  const modelName = smallModel(model.name)

  const exclude = excludedOperations(options, model.name)
  const ableQueries = disableQueries(options, model.name)
  const ableMutations = disableMutations(options, model.name)

  // paths -> users
  outputFile(
    getCrud(
      modelsTmpFn,
      {
        GET: ableQueries && !exclude.includes('findMany'),
        POST: ableMutations && !exclude.includes('createOne'),
        DELETE: ableMutations && !exclude.includes('deleteMany'),
      },
      { modelName, plural: mapping.plural, name: model.name },
    ),
    join(options.output, `paths/${mapping.plural}.js`),
  )

  // paths -> users/{id}
  const pathId = {
    name: modelObj.primaryField.name,
    type: getFieldType(modelObj.primaryField.type),
  }
  outputFile(
    getCrud(
      modelTmpFn,
      {
        GET: ableQueries && !exclude.includes('findOne'),
        PUT: ableMutations && !exclude.includes('updateOne'),
        DELETE: ableMutations && !exclude.includes('deleteOne'),
      },
      { modelName, plural: mapping.plural, name: model.name },
      `{
name: '${pathId.name}',
in: 'path',
type: '${pathId.type}',
required: true,
description: '${pathId.name}',
},`,
    ),
    join(options.output, `paths/${mapping.plural}/{${pathId.name}}.js`),
  )
}
