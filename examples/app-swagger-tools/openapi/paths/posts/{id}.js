/**
 * This file was generated by mrapi
 * Do not make changes to this file directly
 */

exports.default = function (mrapiFn) {
  async function GET(req, res, next) {
    const data = await mrapiFn.findOne(req, res, next, {
      modelName: 'post',
    })
    if (data.code === 0) {
      res.status(200).json(data)
    } else {
      res.status(500).json(data)
    }
  }
  GET.apiDoc = {
    description: 'Query the post by parameter.',
    operationId: 'getOnePost',
    tags: ['posts'],
    parameters: [
      {
        name: 'id',
        in: 'path',
        type: 'integer',
        required: true,
        description: 'id',
      },
    ],
    responses: {
      200: {
        description: 'The post information',
        schema: {
          $ref: '#/definitions/Post',
        },
      },
      default: {
        description: 'Unexpected error',
        schema: {
          $ref: '#/definitions/Error',
        },
      },
    },
  }
  async function PUT(req, res, next) {
    const data = await mrapiFn.update(req, res, next, {
      modelName: 'post',
    })
    if (data.code === 0) {
      res.status(204).json(data)
    } else {
      res.status(500).json(data)
    }
  }
  PUT.apiDoc = {
    description: 'Update a post.',
    operationId: 'updateOnePost',
    tags: ['posts'],
    parameters: [
      {
        name: 'id',
        in: 'path',
        type: 'integer',
        required: true,
        description: 'id',
      },
      {
        name: 'data',
        in: 'body',
        schema: {
          $ref: '#/definitions/PostCreateInput',
        },
        required: true,
      },
    ],
    responses: {
      204: {
        description: 'Post updated successfully.',
        schema: {
          $ref: '#/definitions/Post',
        },
      },
      default: {
        description: 'Unexpected error',
        schema: {
          $ref: '#/definitions/Error',
        },
      },
    },
  }
  async function DELETE(req, res, next) {
    const data = await mrapiFn.delete(req, res, next, {
      modelName: 'post',
    })
    if (data.code === 0) {
      res.status(200).json(data)
    } else {
      res.status(500).json(data)
    }
  }
  DELETE.apiDoc = {
    description: 'Delete post.',
    operationId: 'deleteOnePost',
    tags: ['posts'],
    parameters: [
      {
        name: 'id',
        in: 'path',
        type: 'integer',
        required: true,
        description: 'id',
      },
    ],
    responses: {
      200: {
        description: 'Post deleted successfully.',
      },
      default: {
        description: 'Unexpected error',
        schema: {
          $ref: '#/definitions/Error',
        },
      },
    },
  }
  return {
    GET,
    PUT,
    DELETE,
  }
}
